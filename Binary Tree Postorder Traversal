/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> PostorderTraversal(TreeNode root) {
        IList<int> result = new List<int>();
        if(root == null)
            return result;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.Push(root);
        
        while(stack.Count > 0)
        {
            TreeNode currNode = stack.Pop();
            
            if(currNode.right == null && currNode.left == null)
            {
                result.Add(currNode.val);
                continue;
            }
            
            TreeNode currNodeLeft = currNode.left;
            TreeNode currNodeRight = currNode.right;
            currNode.right = null;
            currNode.left = null;
            stack.Push(currNode);
            
            if(currNodeRight != null)
                stack.Push(currNodeRight);
            
            if(currNodeLeft != null)
                stack.Push(currNodeLeft);
        }
        return result;
    }
}


//Another solution
public class Solution {
    public IList<int> PostorderTraversal(TreeNode root) {
        
        List<int> list = new List<int>();
        
        if(root == null)
           return list;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        do{
            while(root != null)
            {
                if(root.right != null)
                    stack.Push(root.right);
                stack.Push(root);
                root = root.left;
            }
            TreeNode curr = stack.Pop();
            root = curr;
            if(curr.right != null && stack.Count > 0 && curr.right == stack.Peek())
            {
                TreeNode rightChild = stack.Pop();
                stack.Push(curr);
                root = rightChild;
            }
            else
            {
                list.Add(root.val);
                root = null;
            }
            
        }while(stack.Count > 0);
        
        
        
        /*Stack<TreeNode> stack1 = new Stack<TreeNode>();
        
        stack.Push(root); 
        
        while (stack.Count > 0) 
        { 
            TreeNode curr = stack.Pop();
            stack1.Push(curr);
            if(curr != null && curr.left != null)
                stack.Push(curr.left);
            if(curr != null && curr.right != null)
                stack.Push(curr.right);
        }
        while(stack1.Count > 0)
        {
            TreeNode curr = stack1.Pop();
            list.Add(curr.val); 
        }*/
    
        return list;
    }
}
