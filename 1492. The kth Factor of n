//Problem description
/*
You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.
Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.
*/
public class Solution {
    public int KthFactor(int n, int k) {
        int count = 0;
        int div = 1;
        while(count < k && div <= n/ 2)
        {
            if(n % div == 0)
                count++;
            if(count == k)
                return div;
            div++;
        }
        
        if(count + 1 == k)
            return n;
        else
            return -1;
    }
}
//Another solution
public class Solution {
    public int KthFactor(int n, int k) {
        int r =(int) Math.Sqrt(n);
        
        for(int i = 1; i <= r; i++) 
        {
            if(n % i == 0) {
                k--;
            }
            if(k == 0) 
            {
                return i;
            }
        }
        
        for(int i = r*r == n ? r - 1 : r; i > 0; i--) 
        {
            if(n % i == 0) 
            {
                k--;
            }
            if(k == 0) 
            {
                return n / i;
            }
        }
        return -1;
    }
}
//Using priority queue
public class Solution {
    PriorityQueue<int, int> heap = new PriorityQueue<int, int>(new DecreaseCompare<int>());
    public void heappushK(int x, int k) {
        heap.Enqueue(x, x);
        if (heap.Count > k) {
            heap.Dequeue();    
        }
    }
    public int KthFactor(int n, int k) {
        int sqrtN = (int) Math.Sqrt(n);
        for (int x = 1; x < sqrtN + 1; ++x) {
            if (n % x == 0) {
                heappushK(x, k);
                if (x != n / x) {
                    heappushK(n / x, k);    
                }    
            }    
        }  
        return k == heap.Count ? heap.Dequeue() : -1;
    }
    
    public class DecreaseCompare<T> : IComparer<T> where T : IComparable<T>
    {
        public int Compare(T x, T y)
        {
            return y.CompareTo(x);
        }
    }
}
