//Problem description
/*
You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. 
That is, all the 1's will appear to the left of all the 0's in each row.
A row i is weaker than a row j if one of the following is true:
The number of soldiers in row i is less than the number of soldiers in row j.
Both rows have the same number of soldiers and i < j.
Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.
*/
public class Solution {
    public int[] KWeakestRows(int[][] mat, int k) {
        Dictionary<int, List<int>> minHeap = new Dictionary<int, List<int>>();
        int[] result = new int[k];
        
        for(int index = 0; index < mat.Length; index++)
        {
            int currentStrength = 0;
            for(int index1 = 0; index1 < mat[index].Length; index1++)
            {
                if(mat[index][index1] == 0)
                   break;
                currentStrength++;
            }
            if(!minHeap.ContainsKey(currentStrength))
                minHeap[currentStrength] = new List<int>();
            minHeap[currentStrength].Add(index);
        }
        int pos = 0;
        foreach(KeyValuePair<int, List<int>> item in minHeap.OrderBy(v => v.Key))
        {
            for(int index = 0; index < item.Value.Count; index++)
            {
                result[pos] = item.Value[index];
                pos++;
                if(pos == k)
                    break;
            }
            if(pos == k)
                break;   
        }
        return result;
    }
}
//Binary Search solution
public class Solution {
    public int[] KWeakestRows(int[][] mat, int k) {
        Dictionary<int, List<int>> minHeap = new Dictionary<int, List<int>>();
        int[] result = new int[k];
        
        for(int index = 0; index < mat.Length; index++)
        {
            int position = SearchPosition(mat[index]);
            int currentStrength = position + 1;
            if(!minHeap.ContainsKey(currentStrength))
                minHeap[currentStrength] = new List<int>();
            minHeap[currentStrength].Add(index);
        }
        int pos = 0;
        foreach(KeyValuePair<int, List<int>> item in minHeap.OrderBy(v => v.Key))
        {
            for(int index = 0; index < item.Value.Count; index++)
            {
                result[pos] = item.Value[index];
                pos++;
                if(pos == k)
                    break;
            }
            if(pos == k)
                break;   
        }
        return result;
    }
    
    private int SearchPosition(int[] row)
    {
        int left = 0;
        int right = row.Length - 1;
        int res = -1;
        
        while(left <= right)
        {
            int mid = left + (right - left) / 2;
            if(row[mid] == 1)
            {
                res = mid + 1;
                left = mid + 1;
            }
            else
                right = mid - 1;
        }
        return res;
    }
}
