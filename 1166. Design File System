//Problem description
/*
You are asked to design a file system that allows you to create new paths and associate them with different values.
The format of a path is one or more concatenated strings of the form: / followed by one or more lowercase English letters. 
For example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string "" and "/" are not.
Implement the FileSystem class:
bool createPath(string path, int value) Creates a new path and associates a value to it if possible and returns true. 
Returns false if the path already exists or its parent path doesn't exist.
int get(string path) Returns the value associated with path or returns -1 if the path doesn't exist.
*/
public class FileSystem {

    public class TrieNode{
        public string ch;
        public Dictionary<string, TrieNode> children;
        public int value;
        public TrieNode(string c)
        {
            ch = c;
            children = new Dictionary<string, TrieNode>();
            value = -1;
        }
    }
    TrieNode root;
    
    public FileSystem() {
        root = new TrieNode("");
    }
    
    public bool CreatePath(string path, int value) {
        string[] splittedPath = path.Split("/");
        TrieNode current = root;
        
        for(int index = 1; index < splittedPath.Length; index++)
        {
            string currentDirectory = splittedPath[index];
            if(!current.children.ContainsKey(currentDirectory))
            {
                if(index == splittedPath.Length - 1)
                {
                    current.children[currentDirectory] = new TrieNode(currentDirectory);
                }
                else  
                    return false;
            }
            current = current.children[currentDirectory];
        }
        if(current.value != -1)
            return false;
        current.value = value;
        return true;
    }
    
    public int Get(string path) {
        string[] splittedPath = path.Split("/");
        TrieNode current = root;
        
        for(int index = 1; index < splittedPath.Length; index++)
        {
            string currentDirectory = splittedPath[index];
            if(!current.children.ContainsKey(currentDirectory))
            {
                return -1;
            }
            current = current.children[currentDirectory];
        }
        return current.value;
    }
}

/**
 * Your FileSystem object will be instantiated and called as such:
 * FileSystem obj = new FileSystem();
 * bool param_1 = obj.CreatePath(path,value);
 * int param_2 = obj.Get(path);
 */
public class FileSystem {
    Dictionary<string, int> paths;
    
    public FileSystem() {
        paths = new Dictionary<string, int>();
    }
    
    public bool CreatePath(string path, int value) {
        if(string.IsNullOrEmpty(path) || (path.Length == 1 && string.Equals(path, "/")) || paths.ContainsKey(path))
        {
            return false;
        }
        
        int lastIndex = path.LastIndexOf("/");
        string parent = path.Substring(0, lastIndex);
        
        if(parent.Length > 1 && !paths.ContainsKey(parent))
            return false;
        paths[path] = value;
        return true;
    }
    
    public int Get(string path) {
        return paths.ContainsKey(path) ? paths[path] : -1;
    }
}
