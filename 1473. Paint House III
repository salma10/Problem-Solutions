//Problem Description
/*There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.
A neighborhood is a maximal group of continuous houses that are painted with the same color.
For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].
Given an array houses, an m x n matrix cost and an integer target where:
houses[i]: is the color of the house i, and 0 if the house is not painted yet.
cost[i][j]: is the cost of paint the house i with the color j + 1.
Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.
*/
public class Solution {
    public int MinCost(int[] houses, int[][] cost, int m, int n, int target) {
        int[][][] dp = new int[m][][];
        for(int i = 0; i < m; i++)
        {
            dp[i] = new int[n][];
            for(int j = 0; j < n; j++)
            {
                dp[i][j] = Enumerable.Repeat(int.MaxValue, m + 1).ToArray();
            }
        }
        if (houses[0] == 0)
        {
            for(int j = 0; j < n; j++)
            {
                dp[0][j][1] = cost[0][j];
            }
        }
        else
            dp[0][houses[0] - 1][1] = 0;
        
        for(int i = 1; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                for(int k = 1; k <= m; k++)
                {
                    if (dp[i-1][j][k] != int.MaxValue)
                    {
                        if (houses[i] == 0)
                        {
                            for(int l = 0; l < n; l++)
                            {
                                int newk = k + (l == j ? 0 : 1);
                                dp[i][l][newk] = Math.Min(dp[i][l][newk], dp[i - 1][j][k] + cost[i][l]);
                            }
                        }
                        else
                        {
                            int l = houses[i]-1;
                            int newk = k + (l == j ? 0 : 1);
                            dp[i][l][newk] = Math.Min(dp[i][l][newk], dp[i - 1][j][k]);
                        }
                    }
                }
            }
        }
        
        int res = int.MaxValue;
        
        for(int i = 0; i < n; i++)
        {
            res = Math.Min(res, dp[m - 1][i][target]);
        }
        return res == int.MaxValue ? -1 : res;
    }
}
