//Problem description
/*
Given the root of a binary search tree, return a balanced binary search tree with the same node values. 
If there is more than one answer, return any of them.
A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode BalanceBST(TreeNode root) {
        if(root == null)
            return root;
        
        List<int> nodeList = new List<int>();
        InOrderTraversal(root, nodeList);
        return BuildTree(nodeList, 0, nodeList.Count - 1);
    }
    
    private TreeNode BuildTree(List<int> nodeList, int left, int right)
    {
        if(left > right)
        {
            return null;
        }
        
        int mid = (left + right) / 2;
        TreeNode current = new TreeNode(nodeList[mid]);
        current.left = BuildTree(nodeList, left, mid - 1);
        current.right = BuildTree(nodeList, mid + 1, right);
        
        return current;
    }
    
    public void InOrderTraversal(TreeNode root, List<int> nodeList)
    {
        if(root == null)
            return;
        
        InOrderTraversal(root.left, nodeList);
        nodeList.Add(root.val);
        InOrderTraversal(root.right, nodeList);
    }
}

