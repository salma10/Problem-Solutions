//Problem description
/*
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.
In one shift operation:
Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.
*/
public class Solution {
    public IList<IList<int>> ShiftGrid(int[][] grid, int k) {
        int numCols = grid[0].Length;
        int numRows = grid.Length;

        List<IList<int>> newGrid = new List<IList<int>>();
        for (int row = 0; row < numRows; row++) {
            List<int> newRow = new List<int>();
            newGrid.Add(newRow);
            for (int col = 0; col < numCols; col++) {
                newRow.Add(0);
            }
        }

        for (int row = 0; row < numRows; row++) {
            for (int col = 0; col < numCols; col++) {
                int newCol = (col + k) % numCols;
                int wrapAroundCount = (col + k) / numCols;
                int newRow = (row + wrapAroundCount) % numRows;
                newGrid[newRow][newCol] = grid[row][col];
            }
        }

        return newGrid;
    }
}
