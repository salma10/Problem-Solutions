//Problem description
/*
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, 
or 0 if no such sequence exists.
*/
public class Solution {
    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {
        HashSet<string> words = new HashSet<string>(wordList);
        if(!words.Contains(endWord))
            return 0;
        
        LinkedList<string> queue = new LinkedList<string>();
        words.Remove(beginWord);
        queue.AddLast(beginWord);
        int wordLen = beginWord.Length;
        int level = 1;
        
        while(queue.Count > 0)
        {
            int size = queue.Count;
            for(int i = 0; i < size; i++)
            {
                char[] currentWord = queue.First().ToCharArray();
                queue.RemoveFirst();
                for(int j = 0; j < wordLen; j++)
                {
                    char temp = currentWord[j];
                    for(char c = 'a'; c <= 'z'; c++)
                    {
                        currentWord[j] = c;
                        string newWord = new string(currentWord);
                        if(words.Contains(newWord))
                        {
                            if(newWord.Equals(endWord))
                                return level + 1;
                            queue.AddLast(newWord);
                            words.Remove(newWord);
                        }
                    }
                    currentWord[j] = temp;
                }
            }
            level++;
        }
        return 0;
    }
}
