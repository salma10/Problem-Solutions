//Problem description
/*
You are given an array of integers stones where stones[i] is the weight of the ith stone.
We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.
Return the smallest possible weight of the left stone. If there are no stones left, return 0.
*/
public class Solution {
    public int LastStoneWeight(int[] stones) {
        PriorityQueue<int, int> maxHeap = new PriorityQueue<int, int>(new DescendingComparator());
        for(int index = 0; index < stones.Length; index++)
        {
            maxHeap.Enqueue(stones[index], stones[index]);
        }
        
        while(maxHeap.Count > 1)
        {
            int max = maxHeap.Dequeue();
            int seccondMax = maxHeap.Dequeue();

            if(max - seccondMax != 0)
                maxHeap.Enqueue(max - seccondMax, max - seccondMax);
        }
        return  maxHeap.Count == 0 ? 0 : maxHeap.Dequeue(); 
    }
    
    public class DescendingComparator : IComparer<int>
    {
        public int Compare(int x, int y)
        {
            return y - x;
        }
    }
}
