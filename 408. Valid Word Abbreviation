//Problem description
/*
A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.
For example, a string such as "substitution" could be abbreviated as (but not limited to):
"s10n" ("s ubstitutio n")
"sub4u4" ("sub stit u tion")
"12" ("substitution")
"su3i1u2on" ("su bst i t u ti on")
"substitution" (no substrings replaced)
The following are not valid abbreviations:

"s55n" ("s ubsti tutio n", the replaced substrings are adjacent)
"s010n" (has leading zeros)
"s0ubstitution" (replaces an empty substring)
Given a string word and an abbreviation abbr, return whether the string matches the given abbreviation.
*/
public class Solution {
    public bool ValidWordAbbreviation(string word, string abbr) {
        int wordLen = word.Length;
        
        if(wordLen < abbr.Length)
            return false;
        
        int currentIndex = 0;

        for(int index = 0; index < abbr.Length; )
        {
            if(currentIndex < wordLen && word[currentIndex] == abbr[index])
            {
                currentIndex++;
                index++;
            }
            else if(Char.IsDigit(abbr[index]))
            {
                int number = abbr[index] - '0';
                if(number == 0)
                    return false;
                index++;
                while(index < abbr.Length && Char.IsDigit(abbr[index]))
                {
                    number = (number * 10) + (abbr[index] - '0');
                    index++;
                }
                currentIndex += number;
                if(currentIndex > wordLen)
                    return false;
            }
            else
                return false;
        }
        if(currentIndex == wordLen)
            return true;
        else
            return false;
    }
}
