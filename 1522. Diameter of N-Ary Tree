//Problem description
/*
Given a root of an N-ary tree, you need to compute the length of the diameter of the tree.
The diameter of an N-ary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root.
(Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)
*/
/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
    
    public Node() {
        val = 0;
        children = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        children = new List<Node>();
    }
    
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/

public class Solution {
    public int Diameter(Node root) {
        List<int> nodesMaxDiameterList = new List<int>();
        CalculateDiameter(root, nodesMaxDiameterList);
        int result = 0;
        foreach(int currentNodeMaxDiameter in nodesMaxDiameterList)
        {
            result = Math.Max(result, currentNodeMaxDiameter);
        }
        return result;
    }
    
    private int CalculateDiameter(Node root, List<int> nodesMaxDiameterList)
    {
        if(root == null)
            return 0;
        int maxDiameter = 0;
        int secondMaxDiameter = 0;
        
        for(int i = 0; i < root.children.Count; i++)
        {
            int currentDiameter = CalculateDiameter(root.children[i], nodesMaxDiameterList);
            if(maxDiameter < currentDiameter)
            {
                secondMaxDiameter = maxDiameter;
                maxDiameter = currentDiameter;
            } 
            else if(secondMaxDiameter < currentDiameter)
                secondMaxDiameter = currentDiameter;
        }
        nodesMaxDiameterList.Add(maxDiameter + secondMaxDiameter);
        return maxDiameter + 1;
    }
}
//With improved time and space conplexity
/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
    
    public Node() {
        val = 0;
        children = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        children = new List<Node>();
    }
    
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/

public class Solution {
    int maxDiameter = 0;
    public int Diameter(Node root) {
        CalculateDiameter(root);
        return maxDiameter;
    }
    
    private int CalculateDiameter(Node root)
    {
        if(root == null)
            return 0;
        int firstMaxDiameter = 0;
        int secondMaxDiameter = 0;
        
        for(int i = 0; i < root.children.Count; i++)
        {
            int currentDiameter = CalculateDiameter(root.children[i]);
            if(firstMaxDiameter < currentDiameter)
            {
                secondMaxDiameter = firstMaxDiameter;
                firstMaxDiameter = currentDiameter;
            } 
            else if(secondMaxDiameter < currentDiameter)
                secondMaxDiameter = currentDiameter;
        }
        maxDiameter = Math.Max(maxDiameter, firstMaxDiameter + secondMaxDiameter);
        return firstMaxDiameter + 1;
    }
}
