//Problem description
/*
In a binary tree, a lonely node is a node that is the only child of its parent node. 
The root of the tree is not lonely because it does not have a parent node.
Given the root of a binary tree, return an array containing the values of all lonely nodes in the tree. 
Return the list in any order.
*/
public class Solution {
    public IList<int> GetLonelyNodes(TreeNode root) {
        
        if(root == null)
            return new List<int>();
        
        List<int> result =  new List<int>();
        if(root.left != null && root.right == null)
            result.Add(root.left.val);
        else if(root.right != null && root.left == null)
            result.Add(root.right.val);
        
        result.AddRange(GetLonelyNodes(root.right));
        result.AddRange(GetLonelyNodes(root.left));
        
        return result;
    }
}
//Another solution with better time complexity
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> GetLonelyNodes(TreeNode root) {
        Queue<TreeNode> nodes = new Queue<TreeNode>();
        nodes.Enqueue(root);
        List<int> lonelyChildList = new List<int>();
        while(nodes.Count > 0)
        {
            TreeNode currentNode = nodes.Dequeue();
            if(currentNode.left != null && currentNode.right == null)
                lonelyChildList.Add(currentNode.left.val);
            else if(currentNode.left == null && currentNode.right != null)
                lonelyChildList.Add(currentNode.right.val);
            
            if(currentNode.left != null)
                nodes.Enqueue(currentNode.left);
            if(currentNode.right != null)
                nodes.Enqueue(currentNode.right);
            
        }
        return lonelyChildList;
    }
}
