/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool HasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        targetSum -= root.val;
        if(targetSum == 0 && root.left == null && root.right == null)
            return true;
        return HasPathSum(root.left, targetSum) || HasPathSum(root.right, targetSum);
    }
}

//Another solution
public class Solution {
    public bool HasPathSum(TreeNode root, int sum) {
        if (root == null) 
            return false;
     
         return NodePath(root, 0, sum);
    }
    public bool NodePath(TreeNode root, int PathSum, int sum)
    {
        if(root == null)
            return false;
        
        if(root.left == null && root.right == null)
            return PathSum + root.val == sum;
        //if(root.left != null)
            return NodePath(root.left, PathSum + root.val, sum) || NodePath(root.right, PathSum + root.val, sum);
        //if(root.right != null)
            //return NodePath(root.right, PathSum + root.val, sum);
        
       // return false;
    }
}
