//Problem description
/*
Given two sparse vectors, compute their dot product.
Implement class SparseVector:
SparseVector(nums) Initializes the object with the vector nums
dotProduct(vec) Compute the dot product between the instance of SparseVector and vec
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.
Follow up: What if only one of the vectors is sparse?
*/

public class SparseVector {
    Dictionary<int, int> numsMap;
    public SparseVector(int[] nums) {
        numsMap = new Dictionary<int, int>();
        for(int index = 0; index < nums.Length; index++)
        {
            if(nums[index] != 0)
                numsMap[index] = nums[index];
        }
    }
    
    // Return the dotProduct of two sparse vectors
    public int DotProduct(SparseVector vec) {
        if(numsMap.Count > vec.numsMap.Count)
            return GetSum(vec.numsMap, numsMap);
        else
           return GetSum(numsMap, vec.numsMap); 
    }
    
    private int GetSum(Dictionary<int, int> nums1, Dictionary<int, int> nums2)
    {
        int result = 0;
        foreach(KeyValuePair<int, int> number in nums1)
        {
            if(nums2.ContainsKey(number.Key))
                result += nums2[number.Key] * number.Value;
        }
        return result;
    }
}

// Your SparseVector object will be instantiated and called as such:
// SparseVector v1 = new SparseVector(nums1);
// SparseVector v2 = new SparseVector(nums2);
// int ans = v1.DotProduct(v2);
