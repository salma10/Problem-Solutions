/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/

public class Solution {
    public Node Connect(Node root) {
        Queue<Node> queue = new Queue<Node>();
        if(root ==  null)
            return root;
        Node head = root;
        Node right = null;
        queue.Enqueue(root);
        
        while(queue.Count > 0)
        {
            //Queue<Node> currQueue = new Queue<Node>();
            int count = queue.Count;
            while(count > 0)
            {
                Node currNode = queue.Dequeue();
                currNode.next = right;
                if(currNode.right != null)
                    queue.Enqueue(currNode.right);
                if(currNode.left != null)
                    queue.Enqueue(currNode.left);
                right = currNode;
                count--;
            }
           // queue = currQueue;
            right = null;
        }
        return head;
    }
}
