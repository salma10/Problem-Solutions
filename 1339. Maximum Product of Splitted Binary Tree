//Problem description
/*
Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.
Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.
Note that you need to maximize the answer before taking the mod and not after taking it.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public const int mod = 1_000_000_007;

    long max = 0;
    long total = 0;

    public int MaxProduct(TreeNode root) {
        total = sums(root);

        find(root);

        return (int)(max % mod);
    }

    public void find(TreeNode root)
    {
        if(root == null)
            return;

        max = Math.Max(max, (total - root.val) * root.val);

        find(root.left);
        find(root.right);
    }

    public int sums(TreeNode root)
    {
        if(root == null)
            return 0;

        return root.val += sums(root.left) + sums(root.right);
    }

}
