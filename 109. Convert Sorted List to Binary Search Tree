//Problem description
/*
Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    ListNode root;
    public TreeNode SortedListToBST(ListNode head) {
        root = head;
        int totalNoOfNodes = CountNoNodes(head);
        return BuildTree(0, totalNoOfNodes - 1);
    }
    private int CountNoNodes(ListNode head)
    {
        ListNode current = head;
        int count = 0;
        while(current != null)
        {
            count++;
            current = current.next;
        }
        return count;
    }
    private TreeNode BuildTree(int left, int right)
    {
        if(left > right)
            return null;
        int mid = (left + right) / 2;
        TreeNode leftNode = BuildTree(left, mid - 1);
        TreeNode currentNode = new TreeNode(root.val);
        currentNode.left = leftNode;
        root = root.next;
        currentNode.right = BuildTree(mid + 1, right);
        return currentNode;
    }
}
