//Problem description
/*
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).
*/
public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.Length;
        int len2 = nums2.Length;
        
        if(len1 > len2)
            return FindMedianSortedArrays(nums2, nums1);
        
        if(len1 == 0)
            return (len2 % 2 == 0)? (nums2[len2 / 2] + nums2[(len2 - 1) / 2]) / 2.0 : nums2[len2 / 2];
        
        
        int left = 0, right = len1;
        
        while(left <= right)
        {
            int mid1 = left + (right - left) / 2; 
            int mid2 = (len1 + len2 + 1) / 2 - mid1;
            int l1 = (mid1 == 0)? Int32.MinValue : nums1[mid1 - 1];
            int r1 = (mid1 == len1)? Int32.MaxValue : nums1[mid1];
            int l2 = (mid2 == 0)? Int32.MinValue : nums2[mid2 - 1];
            int r2 = (mid2 == len2)? Int32.MaxValue : nums2[mid2];
            if(l1 <= r2 && l2 <= r1)
            {
                if((len1 + len2) % 2 == 0)
                    return (Math.Max(l1,l2) + Math.Min(r1,r2)) / 2.0;
                else
                    return Math.Max(l1,l2);
            }
            else if(l1 > r2)
                right = mid1 - 1;
            else if(l2 > r1)
                left = mid1 + 1;
        }
        
        return -1;
    }
}
