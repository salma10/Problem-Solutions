//Problem description
/*
You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.
A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).
The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), 
the range of real numbers x such that start <= x < end.
Implement the MyCalendar class:
MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. 
Otherwise, return false and do not add the event to the calendar.
*/
public class MyCalendar {

    public SortedDictionary<int, int> maps;
    public MyCalendar() {
        maps = new SortedDictionary<int, int>();
    }
    
    public bool Book(int start, int end) {
        
    foreach (KeyValuePair<int, int> map in maps)
    {
       if (map.Key < end && start < map.Value) 
           return false;
    }
     maps[start] = end;   
        return true;
    }
}
//Another solution with improved time complexity
public class MyCalendar {
    List<int[]> calenderSlots;
    public MyCalendar() {
        calenderSlots = new List<int[]>();
        calenderSlots.Add(new int[]{int.MinValue, int.MinValue});
        calenderSlots.Add(new int[]{int.MaxValue, int.MaxValue});
    }
    
    public bool Book(int start, int end) {
        
        int insertPosition = SearchInsertPosition(start);
        if(insertPosition == -1)
            return false;
        int[] nextStart = calenderSlots[insertPosition];
        int[] prevEnd = calenderSlots[insertPosition - 1];
        if(end > nextStart[0] || prevEnd[1] > start)
            return false;
        
        calenderSlots.Insert(insertPosition, new int[]{start, end}); 
        return true;
    }
    public int SearchInsertPosition(int start)
    {
        int first = 0;
        int last = calenderSlots.Count - 1;
        
        while(first < last)
        {
            var mid = first + (last - first)/2;
            int next = (calenderSlots[mid])[0];
            if(start == next)
                return -1;
            
            if(start < next)
                last = mid;
            else
                first = mid + 1;
        }
        return last;
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * bool param_1 = obj.Book(start,end);
 */
