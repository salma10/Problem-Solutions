//Problem description
/*
Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#').
You are given a string array sentences and an integer array times both of length n where sentences[i] is a previously typed sentence and times[i] is the corresponding number of times the sentence was typed. For each input character except '#', 
return the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed.
Here are the specific rules:
The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.
Implement the AutocompleteSystem class:
AutocompleteSystem(String[] sentences, int[] times) Initializes the object with the sentences and times arrays.
List<String> input(char c) This indicates that the user typed the character c.
Returns an empty array [] if c == '#' and stores the inputted sentence in the system.
Returns the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than 3 matches, return them all.
*/
public class AutocompleteSystem {
    public class TrieNode {
        public char c;
        public TrieNode[] children;
        public int times;
        public TrieNode(char c) {
            this.c = c;
            this.children = new TrieNode[27];
            this.times = 0;
        }
    }
    
    private TrieNode root;
    private string curs;
    
    public AutocompleteSystem(string[] sentences, int[] times) {
        root = new TrieNode('\0');
        curs = "";
        for(int i = 0; i < sentences.Length; i++)
            Add(sentences[i], times[i]);
    }
    
    public IList<string> Input(char c) {
        var res = new List<string>();
        if (c == '#') {
            Add(curs, 1);
            curs = "";
        }
        else {
            curs += c;
            var list = Search(curs);
            list.Sort((a, b) => a.Item2 == b.Item2 ? a.Item1.CompareTo(b.Item1) : b.Item2.CompareTo(a.Item2));
            return list.Select(x => x.Item1).Take(3).ToList();
        }
        return res;
    }
     public void Populate(TrieNode curr, string s, List<(string, int)> list) {
        if (curr.times > 0)
            list.Add((s, curr.times));
        for (int i = 0; i < 27; i++)
            if (curr.children[i] != null)
                Populate(curr.children[i], s + getChar(i), list);  
    }
    public List<(string, int)> Search(string s) {
        TrieNode curr = root;
        var list = new List<(string, int)>();
        foreach(char c in s) {
            int index = getIndex(c);
            if (curr.children[index] == null)
                return list;
            curr = curr.children[index];
        }
        Populate(curr, s, list);
        return list;
    }
    private int getIndex(char c) {
        return c == ' ' ? 26 : c - 'a';
    }
    private char getChar(int i) {
        return i == 26 ? ' ' : (char)('a' + i);
    }
    
    public void Add(string s, int times) {
        TrieNode curr = root;
        foreach (char c in s) {
            int index = getIndex(c);
            if (curr.children[index] == null)
                curr.children[index] = new TrieNode(c);
            curr = curr.children[index];
        }
        curr.times += times;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * IList<string> param_1 = obj.Input(c);
 */
