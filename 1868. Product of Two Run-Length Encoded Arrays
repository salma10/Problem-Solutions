//PRoblem description
/*
Run-length encoding is a compression algorithm that allows for an integer array nums with many segments of consecutive repeated numbers to be represented by a (generally smaller) 2D array encoded. Each encoded[i] = [vali, freqi] describes the ith segment of repeated numbers in nums where vali is the value that is repeated freqi times.
For example, nums = [1,1,1,2,2,2,2,2] is represented by the run-length encoded array encoded = [[1,3],[2,5]]. Another way to read this is "three 1's followed by five 2's".
The product of two run-length encoded arrays encoded1 and encoded2 can be calculated using the following steps:
Expand both encoded1 and encoded2 into the full arrays nums1 and nums2 respectively.
Create a new array prodNums of length nums1.length and set prodNums[i] = nums1[i] * nums2[i].
Compress prodNums into a run-length encoded array and return it.
You are given two run-length encoded arrays encoded1 and encoded2 representing full arrays nums1 and nums2 respectively. Both nums1 and nums2 have the same length. Each encoded1[i] = [vali, freqi] describes the ith segment of nums1, and each encoded2[j] = [valj, freqj] describes the jth segment of nums2.
Return the product of encoded1 and encoded2.
Note: Compression should be done such that the run-length encoded array has the minimum possible length.
*/
public class Solution {
    public IList<IList<int>> FindRLEArray(int[][] encoded1, int[][] encoded2) {
        List<IList<int>> result = new List<IList<int>>();
        int pos1 = 0, pos2 = 0;
        
        while(pos1 < encoded1.Length && pos2 < encoded2.Length)
        {
            int value = encoded1[pos1][0] * encoded2[pos2][0];
            int len = 0;
            if(encoded1[pos1][1] == encoded2[pos2][1])
            {
                len = encoded1[pos1][1];
                pos1++;
                pos2++;
            }
            else if(encoded1[pos1][1] > encoded2[pos2][1])
            {
                encoded1[pos1][1] = encoded1[pos1][1] - encoded2[pos2][1];
                len = encoded2[pos2][1];
                pos2++;
            }
            else
            {
                encoded2[pos2][1] = encoded2[pos2][1] - encoded1[pos1][1];
                len = encoded1[pos1][1];
                pos1++;
            }
            
            if(result.Count > 0 && result[result.Count - 1][0] == value)
                result[result.Count - 1][1] += len;
            else
                result.Add(new List<int>(){value, len});
        }
        
        return result;
    }
}
