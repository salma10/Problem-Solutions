//Problem description 
/*
A swap is defined as taking two distinct positions in an array and swapping the values in them.
A circular array is defined as an array where we consider the first element and the last element to be adjacent.
Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.
*/
public class Solution {
    public int MinSwaps(int[] nums) {
        int ones = 0;
        for(int index = 0; index < nums.Length; index++)
        {
            ones += nums[index];
        }
        int numOfZeros = 0;
        for (int i = 0; i < ones; i++)
        {
            if (nums[i] == 0) numOfZeros++;
        }
        int minZero = numOfZeros;
        
        for(int index = 1; index < nums.Length; index++)
        {
            if(nums[index - 1] == 0) 
                numOfZeros--;
            if (nums[(index + ones - 1) % nums.Length] == 0) 
                numOfZeros++;
            minZero = Math.Min(minZero, numOfZeros);
        }
        return minZero;
    }
}
