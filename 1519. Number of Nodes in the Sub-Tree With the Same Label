//Problem description
/*
You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).
The edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.
Return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.
A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.
*/
public class Solution {
   Dictionary<int, HashSet<int>> EdgeMap = new();
    string Labels;
    public int[] CountSubTrees(int n, int[][] edges, string labels) {
        Labels = labels;
        foreach(var edge in edges){
            if(!EdgeMap.TryGetValue(edge[0], out var set0)){
                set0 = new();
                EdgeMap[edge[0]] = set0;
            }
            if(!EdgeMap.TryGetValue(edge[1], out var set1)){
                set1 = new();
                EdgeMap[edge[1]] = set1;
            }
            set0.Add(edge[1]);
            set1.Add(edge[0]);
        }
        var answer = new int[n];
        DFS(0, -1, answer);
        return answer;
    }
    int[] DFS(int node, int parent, int[] answer){
        var totals = new int[26];
        var label = Labels[node] - 'a';
        totals[label] = 1;
        foreach(var next in EdgeMap[node]){
            if(next == parent)
                continue;
            var kidTotals = DFS(next, node, answer);
            for(var i = 0; i < 26; i++){
                totals[i] += kidTotals[i];
            }
        }
        answer[node] = totals[label];
        return totals;
    }
}
