//Problem description
/*
Given two vectors of integers v1 and v2, implement an iterator to return their elements alternately.
Implement the ZigzagIterator class:
ZigzagIterator(List<int> v1, List<int> v2) initializes the object with the two vectors v1 and v2.
boolean hasNext() returns true if the iterator still has elements, and false otherwise.
int next() returns the current element of the iterator and moves the iterator to the next element.
*/
public class ZigzagIterator {

    Queue<int> vector1; 
    Queue<int> vector2;
    int lastAccessed;
    
    public ZigzagIterator(IList<int> v1, IList<int> v2) {
        
        vector1 = new Queue<int>();
        vector2 = new Queue<int>();
        
        foreach(int item in v1)
        {
            vector1.Enqueue(item);
        }
        
        foreach(int item in v2)
        {
            vector2.Enqueue(item);
        }
        
        lastAccessed = 2;
    }

    public bool HasNext() {
        if(vector1.Count > 0 || vector2.Count > 0)
            return true;
        else
            return false;
    }

    public int Next() {
        
        if(lastAccessed == 2 && vector1.Count > 0)
        {
            lastAccessed = 1;
            return vector1.Dequeue();
        } 
        else if(lastAccessed == 1 && vector2.Count > 0)
        {
            lastAccessed = 2;
            return vector2.Dequeue();
        }  
        
        return vector1.Count > 0 ? vector1.Dequeue() : vector2.Dequeue();
    }
}

/**
 * Your ZigzagIterator will be called like this:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.HasNext()) v[f()] = i.Next();
 */
 
 
 //Space complexity optimized
 public class ZigzagIterator {
    IList<int> vector1; 
    IList<int> vector2;
    int lastAccessed;
    int v1Pos = 0;
    int v2Pos = 0;
    int v1Len;
    int v2Len;
    public ZigzagIterator(IList<int> v1, IList<int> v2) {        
        vector1 = v1;
        vector2 = v2;
        v1Pos = 0;
        v2Pos = 0;
        v1Len = vector1.Count;
        v2Len = vector2.Count;
        lastAccessed = 2;
    }

    public bool HasNext() {
        if(v1Pos < v1Len || v2Pos < v2Len)
            return true;
        else
            return false;
    }

    public int Next() {      
        if(lastAccessed == 2 && v1Pos < v1Len)
        {
            lastAccessed = 1;
            int elm = vector1[v1Pos];
            v1Pos++;
            return elm;
        } 
        else if(lastAccessed == 1 && v2Pos < v2Len)
        {
            lastAccessed = 2;
            int elm = vector2[v2Pos];
            v2Pos++;
            return elm;
        }  
        else if(v1Pos < v1Len)
        {
            int elm = vector1[v1Pos];
            v1Pos++;
            return elm;
        }
        else
        {
            int elm = vector2[v2Pos];
            v2Pos++;
            return elm;
        }
      //  return vector1.Count > 0 ? vector1.Dequeue() : vector2.Dequeue();
    }
}

/**
 * Your ZigzagIterator will be called like this:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.HasNext()) v[f()] = i.Next();
 */
