//Problem description
/*
Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
answer.length == nums.length.
answer[i] = |leftSum[i] - rightSum[i]|.
Where:
leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.
Return the array answer.
*/
public class Solution {
    public int[] LeftRigthDifference(int[] nums) {
        int[] leftsum = new int[nums.Length];
        int[] rightsum = new int[nums.Length];
        int[] answer = new int[nums.Length];

        int sum = 0;

        for(int i = 0; i < nums.Length; i++)
        {
            leftsum[i] = sum; 
            sum += nums[i];
        }

        sum = 0;

        for (int i = nums.Length - 1; i >= 0; i--)
        {
            rightsum[i] = sum;
            sum += nums[i];
        }

        for (int i = 0; i < nums.Length; i++)
        {
            answer[i] = Math.Abs(leftsum[i] - rightsum[i]);
        }
        
        return answer;
    }
}
