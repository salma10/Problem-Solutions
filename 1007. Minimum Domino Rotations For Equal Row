//Problem description
/*
In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. 
(A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.
Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.
If it cannot be done, return -1.
*/
public class Solution {
    public int MinDominoRotations(int[] tops, int[] bottoms) {
        int rotations = CheckMatch(tops[0], bottoms, tops, tops.Length);
        if(rotations != -1 || tops[0] == bottoms[0])
            return rotations;
        else
            return CheckMatch(bottoms[0], bottoms, tops, tops.Length);
    }
    
    private int CheckMatch(int number, int[] tops, int[] bottoms, int len)
    {
        int noOfRotationTops = 0, noOfRotationBottoms = 0;
        for(int index = 0; index < tops.Length; index++)
        {
            if(tops[index] != number && bottoms[index] != number)
                return -1;
            else if(tops[index] != number)
                noOfRotationTops++;
            else if(bottoms[index] != number)
                noOfRotationBottoms++;
        }
        return Math.Min(noOfRotationTops, noOfRotationBottoms);
    }
}
