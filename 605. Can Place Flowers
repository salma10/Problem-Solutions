//Problem description
/*
You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, 
return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.
*/
public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, int n) {         
     int len = flowerbed.Length;
     if(n <= 0)
         return true;
        
       for(int i = 0; i < len; i++)
       {
            if (len == 1 && flowerbed[i] == 0 && n == 1)
                return true;
            else if (i == len - 1 && flowerbed[i] == 0 && flowerbed[i -1]== 0) 
                n--;
            else if (flowerbed[i] == 1) 
                i++;
            else
            {
                if (flowerbed[i + 1] == 0)
                {
                    n--;
                    i++;
                }
            }
           if(n <= 0)
               break;
       }
       
       if(n > 0)
           return false;
       else
           return true;
    }
}
//Another solution
public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.Length == 1 && flowerbed[0] == 0)
            return true;
        for(int i = 0; i < flowerbed.Length; i++)
        {
            if(flowerbed[i] == 0)
            {
                if(i == 0 && flowerbed[i + 1] == 0)
                {
                    n--;
                    flowerbed[i] = 1;
                }
                else if(i == flowerbed.Length - 1 && flowerbed[i - 1] == 0)
                {
                    n--;
                    flowerbed[i] = 1;
                }
                else if(i > 0 && i < flowerbed.Length - 1 && flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0)
                {
                    n--;
                    flowerbed[i] = 1;
                }
                if(n <= 0)
                    return true;
            }
        }
        if(n > 0)
            return false;
        else
            return true;
    }
}
//Another solution
public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, int n) {
        int pos = 0;   
        if(flowerbed.Length < 2 && n > 1)
            return false;
        else if(flowerbed.Length < 2 && n == 1 && flowerbed[pos] == 0) 
            return true;
        else if(flowerbed.Length < 2 && n == 1) 
            return false;

        while(n > 0 && pos < flowerbed.Length)
        {
            if(flowerbed[pos] == 0)
            {
                if(pos == 0 && flowerbed.Length > 1 && flowerbed[pos + 1] == 0)
                {
                    flowerbed[pos] = 1;
                    n--;
                }
                else if(pos == flowerbed.Length - 1 && flowerbed[pos - 1] == 0)
                    n--;
                else if(pos != 0 && pos != flowerbed.Length - 1 && flowerbed[pos - 1] == 0 && flowerbed[pos + 1] == 0)
                {
                    flowerbed[pos] = 1;
                    n--;
                }
            }           
            pos++;
        }
        return n <= 0;
    }
}
