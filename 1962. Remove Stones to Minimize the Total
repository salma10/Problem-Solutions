//Problem description
/*
You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:
Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.
Return the minimum possible total number of stones remaining after applying the k operations.
floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).
*/
public class Solution {
    public int MinStoneSum(int[] piles, int k) {
        PriorityQueue<int, int> queue = new PriorityQueue<int, int>(Comparer<int>.Create((x, y) => y - x));
        for(int i = 0; i < piles.Length; i++)
        {
            queue.Enqueue(piles[i], piles[i]);
        }
        while(k > 0)
        {
            int current = queue.Dequeue();
            int modifiedPile = (int)Math.Ceiling((double)current / 2);
            queue.Enqueue(modifiedPile, modifiedPile);
            k--;
        }
        int result = 0;
        while(queue.Count > 0)
        {
            int current = queue.Dequeue();
            result += current;
        }
        return result;
    }
}
