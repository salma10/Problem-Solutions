//Problem description
/*
Given a string s, return true if the s can be palindrome after deleting at most one character from it.
*/
//Time complexity - O(n) space - O(1)

public class Solution {
    public bool ValidPalindrome(string s) {
        int left = 0;
        int right = s.Length - 1;
        
        while(left < right)
        {
            if(s[left] != s[right])
            {
               return CheckPalindrome(s, left + 1, right) || CheckPalindrome(s, left, right - 1);
            }
            left++;
            right--;
        }
        return true;
    }
    
    private bool CheckPalindrome(string s, int left, int right)
    {
        while(left < right)
        {
            if(s[left] != s[right])
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
