//Problem description
/*
Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.
The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.
Return the number of remaining intervals.
*/
public class Solution {
    public int RemoveCoveredIntervals(int[][] intervals) {
        Array.Sort(intervals, (a, b) =>{
                    return a[0] - b[0];
                   });
        int count = 1;
        int[] prev = intervals[0];
        
        for(int i = 1; i < intervals.Length; i++)
        {
            int[] current = intervals[i];
            if(prev[0] <= current[0] && current[1] <= prev[1])
                continue;
            else if(current[0] <= prev[0] && prev[1] <= current[1])
                prev = current;
            else
            {
                count++;
                prev = current;
            }
        }
        return count;
    }
}
