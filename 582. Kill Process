//Problem description
/*
You have n processes forming a rooted tree structure. You are given two integer arrays pid and ppid, 
where pid[i] is the ID of the ith process and ppid[i] is the ID of the ith process's parent process.
Each process has only one parent process but may have multiple children processes. 
Only one process has ppid[i] = 0, which means this process has no parent process (the root of the tree).
When a process is killed, all of its children processes will also be killed.
Given an integer kill representing the ID of a process you want to kill, 
return a list of the IDs of the processes that will be killed. You may return the answer in any order.
*/
public class Solution {
    public IList<int> KillProcess(IList<int> pid, IList<int> ppid, int kill) {
        
        Dictionary<int, List<int>> childList = new Dictionary<int, List<int>>();
        
        for(int index = 0; index < ppid.Count; index++)
        {
            if(ppid[index] > 0)
            {
                if(!childList.ContainsKey(ppid[index]))
                    childList[ppid[index]] = new List<int>();
                childList[ppid[index]].Add(pid[index]);
            }
            
        }
        
        List<int> result = new List<int>{ kill };
        
        if(!childList.ContainsKey(kill))
            return result;
        GetAllChild(childList, result, kill);
        return result;
    }
    
    private void GetAllChild(Dictionary<int, List<int>> childList, List<int> result, int kill)
    {
        if(childList.ContainsKey(kill))
        {
            foreach(int child in childList[kill])
            {
                result.Add(child);
                GetAllChild(childList, result, child);
            }
        }
    }
}
