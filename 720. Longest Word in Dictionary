//Problem description
/*
Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.
If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.
*/
public class Solution {
    public string LongestWord(string[] words) {
        HashSet<string> data = new HashSet<string>(words);
        int count = 0;
        string maxWord = "";
        foreach(string word in data)
        {
            bool prev = true;
            for(int index = 0; index < word.Length; index++)
            {
                string currentSubWord = word.Substring(0, index + 1);
                prev = prev && data.Contains(currentSubWord);
                if(!prev)
                    break;
                if(count < index + 1)
                {
                    count = index + 1;
                    maxWord = currentSubWord;
                }
                else if(count == index + 1 && String.Compare(maxWord, currentSubWord) > 0)
                {
                    maxWord = currentSubWord;
                }
                    
            }
        }
        return maxWord;
    }
}
//Using Trie
public class Solution {
    public string LongestWord(string[] words) {
        Trie currentDic = new Trie('#');
        
        foreach(string word in words)
        {
           currentDic.Add(word);
        }
        return SearchMaxWord(currentDic.root, "");
    }
    private string SearchMaxWord(TrieNode root, string longestWord)
    {
        if(root == null)
            return "";
        for(int i = 0; i < 26; i++)
        {
            TrieNode child = root.children[i];
            if(child != null && child.isWord)
            {
                if(child.word.Length > longestWord.Length)
                    longestWord = child.word;
                longestWord = SearchMaxWord(child, longestWord);
            }
        }
        return longestWord;
    }
    public class TrieNode
    {
        public char c;
        public TrieNode[] children;
        public bool isWord;
        public string word;
        public TrieNode(char ch = ' ', bool isWord1 = false, string word1 = "")
        {
            c = ch;
            children = new TrieNode[26];
            isWord = isWord1;
            word = word1;
        }
    }
    public class Trie{
        public TrieNode root;
        public Trie(char character)
        {
            root = new TrieNode(character);
        }
        
        public void Add(string word)
        {
            TrieNode current = root;
            for(int index = 0; index < word.Length; index++)
            {
                //Console.WriteLine("word " + word);
                char currentChar = word[index];
                int charIndex = currentChar - 'a';
                //Console.WriteLine("charIndex " + charIndex);
                if(current.children[charIndex] == null)
                {
                    current.children[charIndex] = new TrieNode(currentChar);
                }
                current = current.children[charIndex];
            }
            current.isWord = true;
            current.word = word;
        }
    }
}
