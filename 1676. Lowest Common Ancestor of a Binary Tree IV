//Problem description
/*
Given the root of a binary tree and an array of TreeNode objects nodes, return the lowest common ancestor (LCA) of all the nodes in nodes. 
All the nodes will exist in the tree, and all values of the tree's nodes are unique.
Extending the definition of LCA on Wikipedia: "The lowest common ancestor of n nodes p1, p2, ..., pn in a binary tree 
T is the lowest node that has every pi as a descendant (where we allow a node to be a descendant of itself) for every valid i". 
A descendant of a node x is a node y that is on the path from node x to some leaf node.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode[] nodes) {
        if(root == null)
            return root;
        if(nodes.Length == 1)
            return nodes[0];
        TreeNode result = nodes[0];
        for(int index = 1; index < nodes.Length; index++)
        {
            result =  LCA(root, result, nodes[index]);
        }
        return result;
    }
    
    public TreeNode LCA(TreeNode root, TreeNode p, TreeNode q) {
        
        if (root == null || root.val == p.val || root.val == q.val)
            return root;
        
        TreeNode left = LCA(root.left, p, q);
        TreeNode right = LCA(root.right, p, q);
        
        if(left != null && right != null)
        {
            return root;
        }
                
        if(left != null)
        {
            return left;
        }
        
        if(right != null)
        {
            return right;
        }
        return null;
        
    }
}
