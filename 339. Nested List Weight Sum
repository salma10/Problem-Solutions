//Problem description
/*
You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.
The depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer's value set to its depth.
Return the sum of each integer in nestedList multiplied by its depth.
*/
public class Solution {
    public int DepthSum(IList<NestedInteger> nestedList) {
        int sum = 0;
        foreach(NestedInteger child in nestedList)
        {
            sum += GetSum(child, 1);
        }
        return sum;
    }
    
    private int GetSum(NestedInteger current, int depth)
    {
        if(current.IsInteger())
            return current.GetInteger() * depth;
        int sum = 0;
        IList<NestedInteger> nestedList = current.GetList();
        foreach(NestedInteger child in nestedList)
        {
            sum += GetSum(child, depth + 1);
        }
        return sum;
    }
    
}
