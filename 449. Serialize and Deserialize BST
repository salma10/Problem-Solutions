//Problem description
/*
Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.
The encoded string should be as compact as possible.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if(root == null)
            return "null,";
        
        string lefttree = serialize(root.left);
        string righttree = serialize(root.right);
        
        return root.val + "," + lefttree + righttree;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        if(data == null)
            return null;
        
        string[] dataArray = data.Split(',');
        Queue<int?> dataQueue = new Queue<int?>();
        
        for(int i = 0; i < dataArray.Length; i++)
        {
           
            if(dataArray[i] != null && !string.IsNullOrEmpty(dataArray[i]))
            {
                if(dataArray[i] != "null")
                    dataQueue.Enqueue(Convert.ToInt32(dataArray[i]));
                else if(dataArray[i] == "null")
                    dataQueue.Enqueue(null);
            }
        }
        
        return deserializeHelper(dataQueue);
    }
    
    public TreeNode deserializeHelper(Queue<int?> s)
    {
        if(s.Count == 0)
            return null;
         
        if(s.Peek() == null)
        {
            s.Dequeue();
            return null;
        }
         
        TreeNode root = new TreeNode((int)s.Dequeue());
        root.left = deserializeHelper(s);
        root.right = deserializeHelper(s);
       
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;


//Another solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if(root == null)
            return null;
        
        string lefttree = serialize(root.left);
        string righttree = serialize(root.right);
        return root.val + "," + lefttree + righttree;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {   
        if(data == null)
            return null;
        
        string[] dataArray = data.Split(',');
        Queue<int?> dataQueue = new Queue<int?>();
        
        for(int i = 0; i < dataArray.Length; i++)
        {
            if(dataArray[i] != null && !string.IsNullOrEmpty(dataArray[i]))
            {
                if(dataArray[i] != "null")
                    dataQueue.Enqueue(Convert.ToInt32(dataArray[i]));
            }
        }
        return deserializeHelper(dataQueue, int.MinValue, int.MaxValue);
    }
    
    public TreeNode deserializeHelper(Queue<int?> s, int min, int max)
    {
        if(s.Count == 0)
            return null;
        if(s.Peek() == null)
            return null;
        
        int val = (int)s.Peek();
        TreeNode root = null;       
        if(min < val && val < max)
        {
            s.Dequeue();
            root = new TreeNode(val);
            root.left = deserializeHelper(s, min, val);
            root.right = deserializeHelper(s, val, max);
        }
        return root;
    }
}
