/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int Total = 0;
    public int SumRootToLeaf(TreeNode root) {
        Sum(root, "");
        return Total;
    }
    
    private void Sum(TreeNode root, string path)
    {
        if(root.left == null && root.right == null)
        {
            Total += Convert.ToInt32(path + root.val.ToString(), 2);
            return;
        }
        if(root.left != null)
            Sum(root.left, path + root.val.ToString());
        if(root.right != null)
            Sum(root.right, path + root.val.ToString());
    }
}
//Another solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int SumRootToLeaf(TreeNode root) {
        return Sum(root, "");
    }
    
    private int Sum(TreeNode root, string path)
    {
        if(root.left == null && root.right == null)
        {
            return Convert.ToInt32(path + root.val.ToString(), 2);
        }
        int left = 0, right = 0;
        if(root.left != null)
            left = Sum(root.left, path + root.val.ToString());
        if(root.right != null)
            right = Sum(root.right, path + root.val.ToString());
        
        return left + right;
    }
}
