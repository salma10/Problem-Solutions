//Problem description
/*Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.
*/

public class Solution {
    public string FrequencySort(string s) {
          
        Dictionary<char,int> dict = new Dictionary<char,int>();
        for(int i = 0; i < s.Length; i++)
        {
            if(dict.ContainsKey(s[i]))
                dict[s[i]]++;
            else
                dict[s[i]] = 1;
        }
        
        var dict1 = dict.OrderBy(v => v.Value).ToDictionary(v => v.Key, 
                                 v => v.Value);
        string result = string.Empty;
        
        foreach(var item in dict1)
        {
            
            result = new string(item.Key, item.Value) + result;
        }
         
        return result;
                  
    }
}
