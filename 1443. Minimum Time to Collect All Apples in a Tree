//Problem description
/*
Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.
The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.
*/
public class Solution {
    public int MinTime(int n, int[][] edges, IList<bool> hasApple) {
        Dictionary<int, List<int>> adj = new Dictionary<int, List<int>>();
        foreach (int[] edge in edges) 
        {
            int a = edge[0];
            int b = edge[1];
            if (!adj.ContainsKey(a)) 
            {
                adj[a] = new List<int>();
            }
            if (!adj.ContainsKey(b)) 
            {
                adj[b] = new List<int>();
            }            
            adj[a].Add(b);
            adj[b].Add(a);
        }
        return DFS(0, -1, adj, hasApple);        
    }

    public int DFS(int node, int parent, Dictionary<int, List<int>> adj, IList<bool> hasApple) 
    {
        if (!adj.ContainsKey(node)) 
        {
            return 0;
        }

        int totalTime = 0;
        foreach (int child in adj[node]) 
        {
            if (child == parent) 
            {
                continue;
            }
            int childTime = DFS(child, node, adj, hasApple);
            if (childTime > 0 || hasApple[child]) 
            {
                totalTime += childTime + 2;
            }
        }
        return totalTime;
    }
}
