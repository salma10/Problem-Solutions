//Problem description
/*
You are given the head of a linked list and two integers m and n.
Traverse the linked list and remove some nodes in the following way:
Start with the head as the current node.
Keep the first m nodes starting with the current node.
Remove the next n nodes
Keep repeating steps 2 and 3 until you reach the end of the list.
Return the head of the modified list after removing the mentioned nodes.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode DeleteNodes(ListNode head, int m, int n) {
        
        ListNode current = head;        
        int skip = m, delete = n;
        
        while(current != null)
        {
            if(skip > 0)
            {
                skip--;
                if(skip == 0)
                {
                    delete = n;
                    continue;
                } 
                current = current.next;
            }
            else
            {
                current.next = current.next == null ? null : current.next.next;
                delete--;
                if(delete == 0)
                {
                   skip = m;
                   current = current.next;
                }
            }
        }
        return head;
    }
}
