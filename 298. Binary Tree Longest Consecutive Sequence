//Problem description
/*
Given the root of a binary tree, return the length of the longest consecutive sequence path.
The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. 
The longest consecutive path needs to be from parent to child (cannot be the reverse).
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int LongestConsecutive(TreeNode root) {
        return FindLongestConsecutive(root, 1, 1);
    }
    
    private int FindLongestConsecutive(TreeNode root, int MaxSeq, int currSeq)
    {
        if(root == null)
            return Math.Max(MaxSeq, currSeq);
        int left = 0, right = 0;
        if(root.left != null && root.left.val == root.val + 1)
        {
            left = FindLongestConsecutive(root.left, MaxSeq, currSeq + 1);
        }
        else
        {
            MaxSeq = Math.Max(MaxSeq, currSeq);
            left = FindLongestConsecutive(root.left, MaxSeq, 1);
        }
        if(root.right != null && root.right.val == root.val + 1)
        {
            right = FindLongestConsecutive(root.right, MaxSeq, currSeq + 1);
        }
        else
        {
            MaxSeq = Math.Max(MaxSeq, currSeq);
            right = FindLongestConsecutive(root.right, MaxSeq, 1);
        }
        return Math.Max(left, right);
    }
}
