//Problem description
/*
You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.
Return the number of connected components in the graph.
*/
public class Solution {
    public int CountComponents(int n, int[][] edges) {
        int[] root = new int[n];
        int[] rank = new int[n];
        int count = n;
        
        for(int i = 0; i < n; i++)
        {
            root[i] = i;
            rank[i] = 1;
        }
        
        for(int i = 0; i < edges.Length; i++)
        {
            count = Union(edges[i][0], edges[i][1], count, root, rank);
        }
        return count;
    }
    private int Find(int idx, int[] root) 
    {
        if (idx == root[idx]) {
            return idx;
        }
        return root[idx] = Find(root[idx], root);
    }

    private int Union(int x, int y, int count, int[] root, int[] rank) 
    {
        int rootX = Find(x, root);
        int rootY = Find(y, root);
        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY]) {
                root[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                root[rootX] = rootY;
            } else {
                root[rootY] = rootX;
                rank[rootX] += 1;
            }
            count--;
        }
        return count;
    }
}
