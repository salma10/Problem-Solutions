//Problem description
/*
Given the root of a binary tree, return all duplicate subtrees.
For each kind of duplicate subtrees, you only need to return the root node of any one of them.
Two trees are duplicate if they have the same structure with the same node values.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<TreeNode> FindDuplicateSubtrees(TreeNode root) {
        var map = new Dictionary<int, List<TreeNode>>();
        int f(TreeNode n) {
            if (n == null) {
                return 0;
            }
            int hash = HashCode.Combine(n.val, f(n.left), f(n.right));
            if (!map.TryGetValue(hash, out var list)) {
                map.Add(hash, list = new List<TreeNode>());
            }
            list.Add(n);
            return hash;
        }
        f(root);
        var res = new List<TreeNode>();
        foreach (var pair in map.Where(p => p.Value.Count > 1)) {
            res.Add(pair.Value.First());
        }
        return res;
    }
}
