//Problem description
/*
Given the head of a linked list, return the list after sorting it in ascending order.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) {
        List<int> temp = new List<int>();
        while(head != null)
        {
            temp.Add(head.val);
            head = head.next;
        }
        Sort(temp, 0, temp.Count - 1);
        ListNode tempNode = new ListNode();
        head = tempNode;
        for(int i = 0; i < temp.Count; i++)
        {
            head.next = new ListNode(temp[i]);
            head = head.next;
        }
        return tempNode.next;
    }    
    void Sort(List<int> arr, int l, int r)
    {
        if (l < r) {
            int m = l+ (r-l)/2;
            Sort(arr, l, m);
            Sort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    void merge(List<int> arr, int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;
        int[] L = new int[n1];
        int[] R = new int[n2];
        int i, j;
        for (i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        i = 0;
        j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}
//Another solution with improved space complexity
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) {
        SortedDictionary<int, int> temp = new SortedDictionary<int, int>();
        while(head != null)
        {
            if(temp.ContainsKey(head.val))
                temp[head.val]++;
            else
                temp[head.val] = 1;
            head = head.next;
        }
        ListNode tempNode = new ListNode();
        head = tempNode;
        foreach(var item in temp)
        {
            int count = item.Value;
            while(count > 0)
            {
                head.next = new ListNode(item.Key);
                head = head.next;
                count--;
            }
        }
        return tempNode.next;
    }    
}
//Without help of extra data structure
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode midNode = GetMid(head);
        ListNode first = SortList(head);
        ListNode second = SortList(midNode);
        return Merge(first, second);
    }   
    private ListNode GetMid(ListNode head)
    {
        if(head == null)
            return head;
        ListNode first = head;
        ListNode second = head;
        ListNode slowPrev = null;
        while(second != null && second.next != null)
        {
            slowPrev = first;
            first = first.next;
            second = second.next.next;
        }
        slowPrev.next = null;
        return first;
    }
    private ListNode Merge(ListNode first, ListNode second)
    {
        if(first == null)
            return second;
        else if(second == null)
            return first;
        
        ListNode result = new ListNode();
        ListNode temp = result;
        
        while(first != null && second != null)
        {
            if(first.val <= second.val)
            {
                temp.next = first;
                temp = temp.next;
                first = first.next;
            }
            else
            {
                temp.next = second;
                temp = temp.next;
                second = second.next;
            }
        }
        temp.next = first == null ? second : first;
        return result.next;
    }
}
