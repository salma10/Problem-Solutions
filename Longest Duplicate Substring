public class Solution {
     public string LongestDupSubstring(string s) {
       var lds = string.Empty;
        var n = s.Length;

        var left = 1;
        var right = n;
        while (left <= right) {
            var mid = left + (right - left) / 2;

            var dup = GetDup(mid, s);
            if (dup != null) {
                lds = dup;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return lds;
    }

    private string GetDup(int mid, string s) {
        var hash = Hash(s.Substring(0, mid));

        var set = new HashSet<long> {
            hash
        };

        var pow = 1L;
        for (var i = 1; i < mid; i++)
            pow *= 31;

        var n = s.Length;
        for (var i = 0; i < n - mid; ++i) {
            hash = NextHash(pow, hash, s[i], s[i + mid]);
            if (!set.Add(hash))
                return s.Substring(i + 1, mid);
        }

        return null;
    }

    private long Hash(string s) {
        var h = 0L;
        var a = 1L;

        var n = s.Length;
        for (var k = n; k >= 1; k--) {
            var ch = s[k - 1];
            h += (ch - 'a' + 1) * a;
            a *= 31;
        }

        return h;
    }

    private long NextHash(long pow, long hash, char left, char right) {
        return (hash - (left - 'a' + 1) * pow) * 31 + (right - 'a' + 1);
    } 
}
