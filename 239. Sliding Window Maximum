//Problem description
/*
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. 
Each time the sliding window moves right by one position.
Return the max sliding window.
*/
public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k) {
        if(nums.Length * k == 0)
            return new int[0];
        if(k == 1)
            return nums;
        int[] result = new int[nums.Length - k + 1];
        LinkedList<int> maxQueue = new LinkedList<int>();
        int maxValue = Int32.MinValue;
        
        for(int i = 0; i < k; i++)
        {
            while(maxQueue.Count > 0 && maxQueue.First.Value < nums[i])
                maxQueue.RemoveFirst();
            while(maxQueue.Count > 0 && maxQueue.Last.Value < nums[i])
                maxQueue.RemoveLast();
            maxQueue.AddLast(nums[i]);
            maxValue = Math.Max(maxValue, nums[i]);
        }
        result[0] = maxValue;
        int index = 1;
        for(int i = k; i < nums.Length; i++)
        {
            if(nums[i - k] == maxQueue.First.Value)
            {
                maxQueue.RemoveFirst();
            }
            while(maxQueue.Count > 0 && maxQueue.Last.Value < nums[i])
            {
                maxQueue.RemoveLast();  
            }
            maxQueue.AddLast(nums[i]);
            result[index] = maxQueue.First.Value;
            index++;
        }
        return result;
    }
}
