//Problem description
/*
You are given the head of a linked list, which contains a series of integers separated by 0's. 
The beginning and end of the linked list will have Node.val == 0.
For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. 
The modified list should not contain any 0's.
Return the head of the modified linked list.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeNodes(ListNode head) {
        ListNode newHead = new ListNode();
        ListNode currentNode = newHead;
        int sum = 0;
        head = head.next;
        while(head != null)
        {
            if(head.val == 0)
            {
               currentNode.next = new ListNode(sum);
                sum = 0;
               currentNode = currentNode.next;
            }
            sum += head.val;
            head = head.next;
        }
        return newHead.next;
    }
}
//Another approach
public class Solution {
    public ListNode MergeNodes(ListNode head) {
        ListNode currentNode = head;
        while(currentNode.next != null)
        {
            if(currentNode.next.val == 0 && currentNode.next.next != null)
            {
               currentNode = currentNode.next;
            }
            else
            {
                currentNode.val += currentNode.next.val;
                currentNode.next = currentNode.next.next;
            }
        }
        return head;
    }
}
