//Problem description
/*
You are given a 0-indexed integer array nums of length n.
The average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. Both averages should be rounded down to the nearest integer.
Return the index with the minimum average difference. If there are multiple such indices, return the smallest one.
Note:
The absolute difference of two numbers is the absolute value of their difference.
The average of n elements is the sum of the n elements divided (integer division) by n.
The average of 0 elements is considered to be 0.
*/
public class Solution {
    public int MinimumAverageDifference(int[] nums) {
        long leftSum = 0, rightSum = 0, left = 0, right = nums.Length, localMin = long.MaxValue, gMin = long.MaxValue, index = 0;
        
        foreach(var v in nums)
            rightSum += v; 
        
        for(int i = 0; i < nums.Length; i++)
        {
            leftSum += nums[i]; 
            rightSum -= nums[i]; 
            ++left; --right;        
            localMin = Math.Abs((leftSum / left) - (rightSum / (right == 0 ? 1 : right))); 
            if(localMin < gMin) 
            {
                gMin = localMin;
                index = i; 
            }
        }
        
        return (int)index;
    }
}
