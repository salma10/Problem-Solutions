//Problem description
/*
Given an integer array nums and two integers k and t, 
return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.
*/
public class Solution {
    public bool ContainsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(t < 0)
            return false;
        
        Dictionary<long, long> lastKNumbers = new Dictionary<long, long>();     
        
        for(int i = 0; i < nums.Length; i++)
        {
            long quotient = getQuotient(nums[i], t);
            long divisor = (long)t + 1;
            
            if(lastKNumbers.ContainsKey(quotient))
                return true;
            else if(lastKNumbers.ContainsKey(quotient - 1) && Math.Abs(nums[i] - lastKNumbers[quotient - 1]) < divisor)
                    return true;
            else if(lastKNumbers.ContainsKey(quotient + 1) && Math.Abs(nums[i] - lastKNumbers[quotient + 1]) < divisor)
                    return true;
                
            lastKNumbers[quotient] = (long)nums[i];
            
            if(i >= k)
            {
                long quotient1 = getQuotient( nums[i - k], t);
                lastKNumbers.Remove(quotient1);
            } 
        }
        return false;
    }
    
    private long getQuotient(int number, int t)
    {
        long divisor = (long)t + 1;
        long dividend = (long)number;
        return dividend < 0 ? (dividend + 1) / divisor - 1 : dividend / divisor;
    }
    
}
