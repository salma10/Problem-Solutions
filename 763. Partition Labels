public class Solution {
    public IList<int> PartitionLabels(string S) {
        
        IList<int> ans = new List<int>();
        int[] last = new int[26];
        for (int i = 0; i < S.Length; ++i)
            last[S[i] - 'a'] = i;
        
        int j = 0, anchor = 0;
        for (int i = 0; i < S.Length; ++i) {
            
            j = Math.Max(j, last[S[i] - 'a']);
            
            if (i == j) {
                ans.Add(i - anchor + 1);
                anchor = i + 1;
            }
        }
        return ans;
    }
}

//Another solution
public class Solution {
    public IList<int> PartitionLabels(string s) {
        Dictionary<char, int> data = new Dictionary<char, int>();
        IList<int> result = new List<int>();
        
        for(int j = 0; j < s.Length; j++)
        {
           data[s[j]] = j;
        }
        
        int i = 0;
        
        while(i < s.Length)
        {
            int lastPos = data[s[i]];
            int firstPos = i;
            while(i < lastPos)
            {
                if(data[s[i]] > lastPos)
                    lastPos = data[s[i]];
                i++;
            }
            i = lastPos + 1;
            result.Add(lastPos - firstPos + 1);
        }
        return result;
    }
    
}
