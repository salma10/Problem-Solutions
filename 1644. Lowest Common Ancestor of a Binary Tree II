//Problem description
/*
Given the root of a binary tree, return the lowest common ancestor (LCA) of two given nodes, p and q. 
If either node p or q does not exist in the tree, return null. 
All values of the nodes in the tree are unique.
According to the definition of LCA on Wikipedia: 
"The lowest common ancestor of two nodes p and q in a binary tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)". 
A descendant of a node x is a node y that is on the path from node x to some leaf node.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    bool pFound = false;
    bool qFound = false;
    
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null)
            return root;
        TreeNode node = FindLCA(root, p, q);
        return pFound && qFound ? node : null;
    }
    
    public TreeNode FindLCA(TreeNode root, TreeNode p, TreeNode q) {
        
        if (root == null)
            return root;
        
        TreeNode left = FindLCA(root.left, p, q);
        TreeNode right = FindLCA(root.right, p, q);
        
        if(left != null && right != null)
        {
            return root;
        }     
        else if(root.val == p.val)
        {
            pFound = true;
            return p;
        }
        else if(root.val == q.val)
        {
            qFound = true;
            return q;
        }
        return left == null ? right : left;
        
    }
}
