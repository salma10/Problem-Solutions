//Problem description
/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it can trap after raining.
*/
public class Solution {
    public int Trap(int[] height) {
        int trappedWater = 0, left = 0, right = height.Length - 1, leftMax = 0, rightMax = 0;        
        while(left < right)
        {
            if(height[left] < height[right])
            {
                if(height[left] >= leftMax)
                    leftMax = height[left];
                else
                    trappedWater += leftMax - height[left];
                left++;
            }
            else 
            {
                if(height[right] >= rightMax)
                    rightMax = height[right];
                else
                    trappedWater += rightMax - height[right];
                right--;
            }               
        }
        return trappedWater;
    }
}
//Dynamic programming solution
public class Solution {
    public int Trap(int[] height) {
        int trappedWater = 0, length = height.Length;  
        int[] leftMax = new int[length];
        int[] rightMax = new int[length];
        leftMax[0] = height[0];
        rightMax[length - 1] = height[length - 1];
        
        for(int i = 1; i < length; i++)
            leftMax[i] = Math.Max(leftMax[i - 1], height[i]);
        for(int i = length - 2; i >= 0; i--)
            rightMax[i] = Math.Max(rightMax[i + 1], height[i]);   
        for(int i = 1; i < length - 1; i++)
            trappedWater += Math.Min(leftMax[i], rightMax[i]) - height[i];
        
        return trappedWater;
    }
}
