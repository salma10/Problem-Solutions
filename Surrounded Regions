public class Solution {
    public void Solve(char[][] board) {
        
        int row = board.Length;
        int col = board[0].Length;
        bool[,] visited = new bool[row, col];
        
        for (int i = 0; i < col; i++)
        {
            if (board[0][i] == 'O' && !visited[0, i])
                MarkInvalid(0, i, board, visited);
            if (board[row - 1][i] == 'O' && !visited[row - 1, i])
                MarkInvalid(row - 1, i, board, visited);
        }
            
        for (int i = 0; i < row; i++)
        {
            if (board[i][0] == 'O' && !visited[i, 0])
                MarkInvalid(i, 0, board, visited);
            if (board[i][col - 1] == 'O' && !visited[i, col - 1])
                MarkInvalid(i, col - 1, board, visited);
        }
        
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(board[i][j] == 'I')
                   board[i][j] = 'O';
                else
                    board[i][j] = 'X';
            }
        }        
    }
    private void MarkInvalid(int r, int c, char[][] board, bool[,] visited)
    {
        visited[r,c] = true;
        board[r][c] = 'I';
        
        if(r - 1 > 0 && board[r - 1][c] != 'X' && !visited[r - 1, c])
            MarkInvalid(r - 1, c, board, visited);
        if(r + 1 < board.Length && board[r + 1][c] != 'X' && !visited[r + 1, c])
            MarkInvalid(r + 1, c, board, visited);
        if(c - 1 > 0 && board[r][c - 1] != 'X' && !visited[r, c - 1])
            MarkInvalid(r, c - 1, board, visited);
        if(c + 1 < board[0].Length && board[r][c + 1] != 'X' && !visited[r, c + 1])
            MarkInvalid(r, c + 1, board, visited);
    }
}
